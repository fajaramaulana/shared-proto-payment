// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/fajaramaulana/shared-proto-payment/proto/auth"

	mock "github.com/stretchr/testify/mock"
)

// AuthServiceServer is an autogenerated mock type for the AuthServiceServer type
type AuthServiceServer struct {
	mock.Mock
}

// LoginUser provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) LoginUser(_a0 context.Context, _a1 *auth.LoginRequest) (*auth.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 *auth.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.LoginRequest) (*auth.LoginResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.LoginRequest) *auth.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) RefreshToken(_a0 context.Context, _a1 *auth.RefreshTokenRequest) (*auth.RefreshTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *auth.RefreshTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RefreshTokenRequest) (*auth.RefreshTokenResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RefreshTokenRequest) *auth.RefreshTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RefreshTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.RefreshTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) RegisterUser(_a0 context.Context, _a1 *auth.RegisterRequest) (*auth.RegisterResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *auth.RegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RegisterRequest) (*auth.RegisterResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RegisterRequest) *auth.RegisterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.RegisterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedAuthServiceServer provides a mock function with given fields:
func (_m *AuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	_m.Called()
}

// NewAuthServiceServer creates a new instance of AuthServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceServer {
	mock := &AuthServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
