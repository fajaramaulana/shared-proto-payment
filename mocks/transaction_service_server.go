// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	transaction "github.com/fajaramaulana/shared-proto-payment/proto/transaction"
	mock "github.com/stretchr/testify/mock"
)

// TransactionServiceServer is an autogenerated mock type for the TransactionServiceServer type
type TransactionServiceServer struct {
	mock.Mock
}

// GetTransactionSummary provides a mock function with given fields: _a0, _a1
func (_m *TransactionServiceServer) GetTransactionSummary(_a0 context.Context, _a1 *transaction.SummaryRequest) (*transaction.SummaryResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionSummary")
	}

	var r0 *transaction.SummaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.SummaryRequest) (*transaction.SummaryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.SummaryRequest) *transaction.SummaryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.SummaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transaction.SummaryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordTransaction provides a mock function with given fields: _a0, _a1
func (_m *TransactionServiceServer) RecordTransaction(_a0 context.Context, _a1 *transaction.TransactionRequest) (*transaction.TransactionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RecordTransaction")
	}

	var r0 *transaction.TransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.TransactionRequest) (*transaction.TransactionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.TransactionRequest) *transaction.TransactionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.TransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transaction.TransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedTransactionServiceServer provides a mock function with given fields:
func (_m *TransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {
	_m.Called()
}

// NewTransactionServiceServer creates a new instance of TransactionServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionServiceServer {
	mock := &TransactionServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
