// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	transaction "github.com/fajaramaulana/shared-proto-payment/proto/transaction"
)

// TransactionServiceClient is an autogenerated mock type for the TransactionServiceClient type
type TransactionServiceClient struct {
	mock.Mock
}

// GetTransactionSummary provides a mock function with given fields: ctx, in, opts
func (_m *TransactionServiceClient) GetTransactionSummary(ctx context.Context, in *transaction.SummaryRequest, opts ...grpc.CallOption) (*transaction.SummaryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionSummary")
	}

	var r0 *transaction.SummaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.SummaryRequest, ...grpc.CallOption) (*transaction.SummaryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.SummaryRequest, ...grpc.CallOption) *transaction.SummaryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.SummaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transaction.SummaryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordTransaction provides a mock function with given fields: ctx, in, opts
func (_m *TransactionServiceClient) RecordTransaction(ctx context.Context, in *transaction.TransactionRequest, opts ...grpc.CallOption) (*transaction.TransactionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RecordTransaction")
	}

	var r0 *transaction.TransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.TransactionRequest, ...grpc.CallOption) (*transaction.TransactionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transaction.TransactionRequest, ...grpc.CallOption) *transaction.TransactionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.TransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transaction.TransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionServiceClient creates a new instance of TransactionServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionServiceClient {
	mock := &TransactionServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
