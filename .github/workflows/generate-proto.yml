name: Versioning and Generate Protobuf

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  versioning:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Install Protobuf and Go Plugins
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2

      - name: Run Makefile to Generate Protobuf
        run: |
          make all

      - name: Auto Versioning (Tagging)
        run: |
          # Fetch all tags from the remote
          git fetch --tags

          # Try to get the latest tag, default to v0.0.0 if none exists
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

          # Remove the 'v' prefix from the version
          CURRENT_VERSION=${CURRENT_VERSION#v}

          # Split the version into its components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"

          # Increment the last part (patch version)
          VERSION_PARTS[2]=$((VERSION_PARTS[2] + 1))

          # Construct the new version
          NEW_VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"

          # Check if the tag already exists and increment until a non-existing tag is found
          while git rev-parse "$NEW_VERSION" >/dev/null 2>&1; do
              VERSION_PARTS[2]=$((VERSION_PARTS[2] + 1))
              NEW_VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          done

          # Create the new tag
          git tag "$NEW_VERSION"

          # Push the new tag to the remote
          git push origin "$NEW_VERSION"

          echo "New tag created: $NEW_VERSION"

        shell: bash
